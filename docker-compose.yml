version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    ports:
      - "15432:5432" # Changed to avoid host port collision
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=jobs
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
    # Increase max_connections to handle high load
    command:
      - "postgres"
      - "-c"
      - "max_connections=500"
      - "-c"
      - "shared_buffers=256MB"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d jobs"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.11-management-alpine
    ports:
      - "5672:5672"  # AMQP
      - "15672:15672" # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=user
      - RABBITMQ_DEFAULT_PASS=password
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: .
      dockerfile: docker/api/Dockerfile
    ports:
      - "8080:8080" # App port
      - "8081:8081" # Metrics port
    environment:
      - DATABASE_URL=postgres://user:password@postgres:5432/jobs
      - RABBITMQ_URL=amqp://user:password@rabbitmq:5672/
      - DB_MAX_CONNS=10
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  worker:
    build:
      context: .
      dockerfile: docker/worker/Dockerfile
    deploy:
      replicas: 10
    environment:
      - DATABASE_URL=postgres://user:password@postgres:5432/jobs
      - RABBITMQ_URL=amqp://user:password@rabbitmq:5672/
      - WORKER_CONCURRENCY=20
      - DB_MAX_CONNS=5
    depends_on:
      api:
        condition: service_started

  simulator:
    build:
      context: .
      dockerfile: docker/simulator/Dockerfile
    deploy:
      replicas: 4
    environment:
      - API_URL=http://api:8080/jobs
      - RATE_PER_SEC=1000
      - CONCURRENCY=1000
    depends_on:
      - api

  prometheus:
    image: prom/prometheus:v2.47.0
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    depends_on:
      - api
      - worker

  grafana:
    image: grafana/grafana:10.1.1
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring/grafana/provisioning/:/etc/grafana/provisioning/
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus

  publisher:
    build:
      context: .
      dockerfile: docker/publisher/Dockerfile
    environment:
      - DATABASE_URL=postgres://user:password@postgres:5432/jobs
      - RABBITMQ_URL=amqp://user:password@rabbitmq:5672/
    depends_on:
      api:
        condition: service_started
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

volumes:
  postgres_data: 